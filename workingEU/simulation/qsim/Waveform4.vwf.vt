// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/17/2022 22:52:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] Op;
reg [3:0] V;
// wires                                               
wire ALU_O0;
wire ALU_O1;
wire ALU_O2;
wire ALU_O3;
wire Reg_A0;
wire Reg_A1;
wire Reg_A2;
wire Reg_A3;
wire Reg_B0;
wire Reg_B1;
wire Reg_B2;
wire Reg_B3;
wire Reg_C0;
wire Reg_C1;
wire Reg_C2;
wire Reg_C3;

// assign statements (if any)                          
EU i1 (
// port map - connection between master ports and signals/registers   
	.ALU_O0(ALU_O0),
	.ALU_O1(ALU_O1),
	.ALU_O2(ALU_O2),
	.ALU_O3(ALU_O3),
	.Op(Op),
	.Reg_A0(Reg_A0),
	.Reg_A1(Reg_A1),
	.Reg_A2(Reg_A2),
	.Reg_A3(Reg_A3),
	.Reg_B0(Reg_B0),
	.Reg_B1(Reg_B1),
	.Reg_B2(Reg_B2),
	.Reg_B3(Reg_B3),
	.Reg_C0(Reg_C0),
	.Reg_C1(Reg_C1),
	.Reg_C2(Reg_C2),
	.Reg_C3(Reg_C3),
	.V(V)
);
initial 
begin 
#1000000 $finish;
end 
// Op[ 5 ]
initial
begin
	Op[5] = 1'b0;
end 
// Op[ 4 ]
initial
begin
	Op[4] = 1'b0;
end 
// Op[ 3 ]
initial
begin
	Op[3] = 1'b1;
	Op[3] = #140000 1'b0;
end 
// Op[ 2 ]
initial
begin
	Op[2] = 1'b1;
	Op[2] = #140000 1'b0;
end 
// Op[ 1 ]
initial
begin
	Op[1] = 1'b0;
end 
// Op[ 0 ]
initial
begin
	Op[0] = 1'b0;
end 
// V[ 3 ]
initial
begin
	V[3] = 1'b1;
	V[3] = #150000 1'b0;
end 
// V[ 2 ]
initial
begin
	V[2] = 1'b0;
end 
// V[ 1 ]
initial
begin
	V[1] = 1'b0;
end 
// V[ 0 ]
initial
begin
	V[0] = 1'b0;
end 
endmodule

