// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/18/2022 23:45:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Reg_File
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Reg_File_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg R_0;
reg R_1;
reg R_2;
reg R_3;
reg Sel0;
reg Sel1;
reg Sel2;
reg Sel3;
reg V0;
reg V1;
reg V2;
reg V3;
// wires                                               
wire Out0;
wire Out1;
wire Out2;
wire Out3;
wire Out4;
wire Out5;
wire Out6;
wire Out7;
wire Reg_A0;
wire Reg_A1;
wire Reg_A2;
wire Reg_A3;
wire Reg_B0;
wire Reg_B1;
wire Reg_B2;
wire Reg_B3;
wire Reg_C0;
wire Reg_C1;
wire Reg_C2;
wire Reg_C3;

// assign statements (if any)                          
Reg_File i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.Out0(Out0),
	.Out1(Out1),
	.Out2(Out2),
	.Out3(Out3),
	.Out4(Out4),
	.Out5(Out5),
	.Out6(Out6),
	.Out7(Out7),
	.R_0(R_0),
	.R_1(R_1),
	.R_2(R_2),
	.R_3(R_3),
	.Reg_A0(Reg_A0),
	.Reg_A1(Reg_A1),
	.Reg_A2(Reg_A2),
	.Reg_A3(Reg_A3),
	.Reg_B0(Reg_B0),
	.Reg_B1(Reg_B1),
	.Reg_B2(Reg_B2),
	.Reg_B3(Reg_B3),
	.Reg_C0(Reg_C0),
	.Reg_C1(Reg_C1),
	.Reg_C2(Reg_C2),
	.Reg_C3(Reg_C3),
	.Sel0(Sel0),
	.Sel1(Sel1),
	.Sel2(Sel2),
	.Sel3(Sel3),
	.V0(V0),
	.V1(V1),
	.V2(V2),
	.V3(V3)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// R_0
initial
begin
	R_0 = 1'b0;
	R_0 = #20000 1'b1;
	R_0 = #10000 1'b0;
end 

// R_1
initial
begin
	R_1 = 1'b1;
	R_1 = #10000 1'b0;
	R_1 = #10000 1'b1;
	R_1 = #10000 1'b0;
end 

// R_2
initial
begin
	R_2 = 1'b0;
	R_2 = #10000 1'b1;
	R_2 = #10000 1'b0;
end 

// R_3
initial
begin
	R_3 = 1'b0;
	R_3 = #10000 1'b1;
	R_3 = #10000 1'b0;
end 

// Sel0
initial
begin
	Sel0 = 1'b1;
	Sel0 = #10000 1'b0;
	Sel0 = #10000 1'b1;
	Sel0 = #40000 1'b0;
end 

// Sel1
initial
begin
	Sel1 = 1'b0;
	Sel1 = #30000 1'b1;
	Sel1 = #30000 1'b0;
end 

// Sel2
initial
begin
	Sel2 = 1'b0;
	Sel2 = #10000 1'b1;
	Sel2 = #10000 1'b0;
	Sel2 = #20000 1'b1;
	Sel2 = #10000 1'b0;
end 

// Sel3
initial
begin
	Sel3 = 1'b0;
	Sel3 = #20000 1'b1;
	Sel3 = #10000 1'b0;
	Sel3 = #20000 1'b1;
	Sel3 = #10000 1'b0;
end 

// V0
initial
begin
	V0 = 1'b0;
end 

// V1
initial
begin
	V1 = 1'b0;
	V1 = #30000 1'b1;
	V1 = #10000 1'b0;
	V1 = #10000 1'b1;
	V1 = #10000 1'b0;
end 

// V2
initial
begin
	V2 = 1'b0;
	V2 = #40000 1'b1;
	V2 = #20000 1'b0;
end 

// V3
initial
begin
	V3 = 1'b0;
	V3 = #40000 1'b1;
	V3 = #10000 1'b0;
end 
endmodule

