// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/18/2022 21:15:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg OP0;
reg OP1;
reg Sel0;
reg Sel1;
reg Sel2;
reg Sel3;
// wires                                               
wire O_OP0;
wire O_OP1;
wire O_Sel0;
wire O_Sel1;
wire O_Sel2;
wire O_Sel3;

// assign statements (if any)                          
Decoder i1 (
// port map - connection between master ports and signals/registers   
	.O_OP0(O_OP0),
	.O_OP1(O_OP1),
	.O_Sel0(O_Sel0),
	.O_Sel1(O_Sel1),
	.O_Sel2(O_Sel2),
	.O_Sel3(O_Sel3),
	.OP0(OP0),
	.OP1(OP1),
	.Sel0(Sel0),
	.Sel1(Sel1),
	.Sel2(Sel2),
	.Sel3(Sel3)
);
initial 
begin 
#1000000 $finish;
end 

// OP0
initial
begin
	OP0 = 1'b0;
	OP0 = #40000 1'b1;
	OP0 = #10000 1'b0;
end 

// OP1
initial
begin
	OP1 = 1'b0;
	OP1 = #40000 1'b1;
	OP1 = #10000 1'b0;
	OP1 = #30000 1'b1;
	OP1 = #10000 1'b0;
end 

// Sel0
initial
begin
	Sel0 = 1'b1;
	Sel0 = #20000 1'b0;
	Sel0 = #20000 1'b1;
	Sel0 = #10000 1'b0;
	Sel0 = #30000 1'b1;
	Sel0 = #10000 1'b0;
	Sel0 = #20000 1'b1;
	Sel0 = #10000 1'b0;
end 

// Sel1
initial
begin
	Sel1 = 1'b1;
	Sel1 = #20000 1'b0;
	Sel1 = #20000 1'b1;
	Sel1 = #10000 1'b0;
	Sel1 = #30000 1'b1;
	Sel1 = #10000 1'b0;
	Sel1 = #20000 1'b1;
	Sel1 = #10000 1'b0;
end 

// Sel2
initial
begin
	Sel2 = 1'b0;
	Sel2 = #80000 1'b1;
	Sel2 = #10000 1'b0;
	Sel2 = #20000 1'b1;
	Sel2 = #10000 1'b0;
end 

// Sel3
initial
begin
	Sel3 = 1'b0;
	Sel3 = #110000 1'b1;
	Sel3 = #10000 1'b0;
end 
endmodule

